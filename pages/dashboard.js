import Head from "next/head";
import Link from "next/link";
import { getSession, useSession, signOut } from "next-auth/client";
import {
  Box,
  Flex,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  IconButton,
  Text,
} from "@chakra-ui/react";
import { HamburgerIcon } from "@chakra-ui/icons";
import { useRouter } from "next/router";
import Login from "../components/Login";
import Calendar from "../components/Dashboard/Calendar";
import { db } from "../firebase";
import { useCollectionOnce } from "react-firebase-hooks/firestore";
import DashboardNotesRow from "../components/Dashboard/DashboardNotesRow";

export default function Dashboard() {
  const [session] = useSession();
  const router = useRouter();

  // const onSignout = () => {
  //   signOut();
  //   router.push("/");
  // };

  if (!session) {
    return <Login />;
  }

  const firstName = session?.user?.name.split(" ")[0];
  const today = new Date().toLocaleDateString();
  const [snapshot] = useCollectionOnce(
    db
      .collection("userDocs")
      .doc(session.user.email)
      .collection("journal")
      .orderBy("dateCreated", "desc")
  );

  return (
    <>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {session && (
        <div
          style={{
            height: "100vh",
            background:
              "#4158d0 linear-gradient(180deg, #CCFBFF 0%, #EF96C5 100%)",
          }}
        >
          <Box
            maxWidth="6xl"
            minWidth="md"
            mx="auto"
            paddingTop="80px"
            height="75vh"
          >
            <Flex justifyContent="space-between">
              <Text fontSize="3xl" fontWeight="bold">
                Hello, {firstName[0].toUpperCase() + firstName.substring(1)}!
              </Text>

              <Menu>
                <MenuButton
                  as={IconButton}
                  aria-label="Options"
                  icon={<HamburgerIcon />}
                  variant="outline"
                />
                <MenuList>
                  <MenuItem>Your insights</MenuItem>
                  <MenuItem>Stats</MenuItem>
                  <MenuItem onClick={signOut}>
                    <Link href="/">Sign out</Link>
                  </MenuItem>
                </MenuList>
              </Menu>
            </Flex>

            <Flex justifyContent="space-between" marginTop="20px" height="100%">
              <Flex
                width="45%"
                flexDirection="column"
                justifyContent="space-between"
              >
                <Box borderRadius="lg" backgroundColor="white" height="35%">
                  <Text marginLeft="30px" fontSize="xl" fontWeight="bold">
                    Coming soon..
                  </Text>
                </Box>

                <Box height="50%">
                  <Text fontSize="2xl" fontWeight="bold">
                    Daily notes
                  </Text>

                  <Box borderRadius="lg" backgroundColor="white" height="90%">
                    {snapshot?.docs.map((doc) => {
                      if (today === doc.data().entryDate) {
                        return (
                          <DashboardNotesRow
                            key={doc.id}
                            entry={doc.data().entryName}
                            time={doc
                              .data()
                              .dateCreated.toDate()
                              .toLocaleTimeString()}
                          />
                        );
                      }
                    })}
                  </Box>
                </Box>
              </Flex>

              <Box borderRadius="lg" backgroundColor="white" width="45%">
                <Calendar />
              </Box>
            </Flex>
          </Box>
        </div>
      )}
    </>
  );
}

export async function getServerSideProps(context) {
  const session = await getSession(context); // load user session

  return {
    props: {
      session,
    },
  };
}
