import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { getSession, useSession, signOut } from "next-auth/client";
import {
  Icon,
  Box,
  Flex,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  IconButton,
  Text,
} from "@chakra-ui/react";
import { MdPlayArrow } from "react-icons/md";
import { HamburgerIcon } from "@chakra-ui/icons";
import Face from "../components/Face";
import { useRouter } from "next/router";
import Login from "../components/Login";
import Calendar from "../components/Dashboard/Calendar";
import { db } from "../firebase";
import { useCollectionOnce } from "react-firebase-hooks/firestore";
import DashboardNotesRow from "../components/Dashboard/DashboardNotesRow";
import { useEffect, useState } from "react";

export default function Dashboard() {
  const [session] = useSession();
  const router = useRouter();
  // const [moodScore, setMoodScore] = useState(0);
  const [isCalculated, setIsCalculated] = useState(false);

  const [generalSentiment, setGeneralSentiment] = useState("meh");

  if (!session) {
    return <Login />;
  }

  useEffect(() => {
    const unsub = db
      .collection("userDocs")
      .doc(session?.user?.email)
      .collection("journal")
      .get()
      .then((querySnapshot) => {
        querySnapshot.forEach((doc) => {
          if (
            !isCalculated &&
            doc.data().entryDate === new Date().toLocaleDateString()
          ) {
            // console.log("mood score:", moodScore);

            // setMoodScore(doc.data().moodScore);
            setIsCalculated(true);

            if (doc.data().moodScore <= -3) {
              setGeneralSentiment("awful");
            } else if (
              doc.data().moodScore >= -2 &&
              doc.data().moodScore <= -1
            ) {
              setGeneralSentiment("bad");
            } else if (doc.data().moodScore == 0) {
              setGeneralSentiment("meh");
            } else if (doc.data().moodScore >= 1 && doc.data().moodScore <= 2) {
              setGeneralSentiment("good");
            } else if (doc.data().moodScore >= 3) {
              setGeneralSentiment("happy");
            }
          }
        });
      });

    return unsub;
  }, []);

  const firstName = session?.user?.name.split(" ")[0];
  const today = new Date().toLocaleDateString();
  const [snapshot] = useCollectionOnce(
    db
      .collection("userDocs")
      .doc(session.user.email)
      .collection("journal")
      .orderBy("dateCreated", "desc")
  );

  const handleClick = () => {
    window.open(
      "https://open.spotify.com/playlist/6HYxTAm2r9bjF6mbmKwNnu?si=1e365b45779c4e0e"
    );
  };

  return (
    <>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {session && (
        <div
          style={{
            height: "100vh",
            background:
              "#4158d0 linear-gradient(180deg, #CCFBFF 0%, #EF96C5 100%)",
          }}
        >
          <Box
            maxWidth="6xl"
            minWidth="md"
            mx="auto"
            paddingTop="80px"
            height="75vh"
          >
            <Flex justifyContent="space-between">
              <Text fontSize="3xl" fontWeight="bold">
                Hello, {firstName[0].toUpperCase() + firstName.substring(1)}!
              </Text>

              <Menu>
                <MenuButton
                  as={IconButton}
                  aria-label="Options"
                  icon={<HamburgerIcon />}
                  variant="outline"
                />
                <MenuList>
                  <MenuItem onClick={signOut}>
                    <Link href="/">Sign out</Link>
                  </MenuItem>
                </MenuList>
              </Menu>
            </Flex>

            <Flex justifyContent="space-between" marginTop="20px" height="100%">
              <Flex
                width="45%"
                flexDirection="column"
                justifyContent="space-between"
              >
                <Box className="glassmorphism" borderRadius="xl" height="35%">
                  <Box>
                    <Flex alignItems="center">
                      <Text
                        marginTop="15px"
                        marginLeft="20px"
                        fontSize="5xl"
                        fontWeight="bold"
                      >
                        You are feeling
                      </Text>
                      <Box marginTop="15px" marginLeft="15px">
                        <Image
                          src={`/images/${generalSentiment}.png`}
                          alt="mood"
                          width="50px"
                          height="50px"
                        />
                      </Box>
                    </Flex>
                    <Text marginLeft="20px" fontSize="xl" fontWeight="light">
                      Listen to our music playlist!
                    </Text>
                  </Box>
                  <Box
                    position="absolute"
                    bottom="15px"
                    right="15px"
                    backgroundColor="black"
                    borderRadius="50%"
                    height="50px"
                    width="50px"
                    cursor="pointer"
                  >
                    <Icon
                      as={MdPlayArrow}
                      w={30}
                      h={30}
                      color="white"
                      marginTop="10px"
                      marginLeft="10px"
                      onClick={handleClick}
                    />
                  </Box>
                </Box>

                <Box height="50%">
                  <Text fontSize="2xl" fontWeight="bold">
                    Daily notes
                  </Text>

                  <Box
                    className="glassmorphism"
                    borderRadius="xl"
                    height="90%"
                    overflowX="hidden"
                  >
                    {snapshot?.docs.map((doc) => {
                      if (today === doc.data().entryDate) {
                        return (
                          <DashboardNotesRow
                            key={doc.id}
                            entry={doc.data().entryName}
                            time={doc
                              .data()
                              .dateCreated.toDate()
                              .toLocaleTimeString()}
                          />
                        );
                      }
                    })}
                  </Box>
                </Box>
              </Flex>

              <Box
                backgroundColor="white"
                borderRadius="xl"
                width="45%"
                height="90%"
              >
                <Calendar />
              </Box>
            </Flex>
          </Box>
        </div>
      )}
    </>
  );
}

export async function getServerSideProps(context) {
  const session = await getSession(context); // load user session

  return {
    props: {
      session,
    },
  };
}
